service: bmt-media-shop-service-unit-test

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-central-1
  profile: serverless-profile


  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::*"
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource: "*"

  environment:
    BUCKET: ${self:service}-templates
    PDF_BUCKET: ${self:service}-pdf
    REVIEWS_TABLE: ${self:service}-table-reviews
    PROMOCODE_TABLE: ${self:service}-promocode
    USERS_TABLE: ${self:service}-users
    ORDERS_TABLE: ${self:service}-orders

package:
  include:
    - wkhtmltopdf

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  s3:
    port: 8800
    directory: /tmp
    cors: true

functions:
  auth:
    handler: api/auth/authorization.auth

  print:
    handler: api/print.receipt
    events:
      - http:
          path: receipt
          method: post
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: $input.json('$')


  createPromocode:
    handler: api/promocode/handler.create
    events:
      - http:
          path: promocode/{id}
          method: post
          integration: lambda
          cors: true
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: $input.json('$')


  checkPromocode:
      handler: api/promocode/handler.check
      events:
        - http:
            path: promocode/{id}
            method: put
            integration: lambda
            cors: true
            authorizer:
              name: auth
              resultTtlInSeconds: 0
            response:
              headers:
                Access-Control-Allow-Origin: "'*'"
                Content-Type: "'application/json'"
              template: $input.json('$')

  getPromocode:
      handler: api/promocode/handler.get
      events:
        - http:
            path: promocode/{id}
            method: get
            integration: lambda
            cors: true
            authorizer:
              name: auth
              resultTtlInSeconds: 0
            response:
              headers:
                Access-Control-Allow-Origin: "'*'"
                Content-Type: "'application/json'"
              template: $input.json('$')

  removePromocode:
    handler: api/promocode/handler.remove
    events:
      - http:
          path: promocode/{id}
          method: delete
          integration: lambda
          cors: true
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: $input.json('$')

  getAllItems:
    handler: api/auth/handler.getAllProfiles
    events:
      - http:
          path: api/profiles
          method: get
          integration: lambda
          cors: true
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: $input.json('$')

  getProfile:
    handler: api/auth/handler.getProfile
    events:
      - http:
          path: api/profile
          method: post
          integration: lambda
          cors: true
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: $input.json('$')

  updateProfile:
    handler: api/auth/handler.updateProfile
    events:
      - http:
          method: put
          path: api/profile/{id}
          cors: true
          integration: lambda
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: $input.json('$')

  getOrders:
    handler: api/admin/handler.getOrders
    events:
      - http:
          path: api/admin/getOrders
          method: get
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: $input.json('$')

  addReview:
    handler: api/reviews/handler.add
    events:
      - http:
          path: reviews/add
          method: post
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: $input.json('$')

  getReviews:
      handler: api/reviews/handler.getByProductID
      events:
        - http:
            path: reviews/{productID}
            method: get
            integration: lambda
            cors: true
            response:
              headers:
                Access-Control-Allow-Origin: "'*'"
                Content-Type: "'application/json'"
              template: $input.json('$')

  createOrder:
    handler: api/admin/handler.createOrder
    events:
      - http:
          method: post
          path: api/admin/createOrder
          cors: true
          integration: lambda
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              Content-Type: "'application/json'"
            template: $input.json('$')

  getOrdersByProfile:
      handler: api/admin/handler.getOrdersByProfile
      events:
        - http:
            method: get
            path: api/admin/getOrdersByProfile
            cors: true
            integration: lambda
            authorizer:
              name: auth
              resultTtlInSeconds: 0
            response:
              headers:
                Access-Control-Allow-Origin: "'*'"
                Content-Type: "'application/json'"
              template: $input.json('$')

resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PDF_BUCKET}
    TemplatesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET}
    PromocodeDynamoDb:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: ${self:provider.environment.PROMOCODE_TABLE}

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    ReviewsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REVIEWS_TABLE}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    OrdersDynamoDb:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            AttributeDefinitions:
              - AttributeName: id
                AttributeType: S
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
            TableName: ${self:provider.environment.ORDERS_TABLE}
plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline