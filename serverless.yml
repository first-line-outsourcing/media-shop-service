service: bmt-media-shop-service-promocode

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-central-1
  profile: serverless-profile


  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::*"
    - Effect: "Allow"
      Action:
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource: "*"

  environment:
    BUCKET: ${self:service}-templates
    PDF_BUCKET: ${self:service}-pdf
    PROMOCODE_TABLE: ${self:service}-promocode
    USERS_TABLE: ${self:service}-users

package:
  include:
    - wkhtmltopdf

functions:
  auth:
    handler: api/auth/handler.auth

  print:
    handler: api/print.receipt
    events:
      - http:
          path: receipt
          method: post
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  createPromocode:
    handler: api/promocode/handler.create
    events:
      - http:
          path: promocode/create
          method: put
          integration: lambda
          cors: true
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  checkPromocode:
    handler: api/promocode/handler.check
    events:
      - http:
          path: promocode/check
          method: put
          integration: lambda
          cors: true
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  getPromocode:
    handler: api/promocode/handler.get
    events:
      - http:
          path: promocode/get
          method: get
          integration: lambda
          cors: true
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  removePromocode:
    handler: api/promocode/handler.remove
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ItemsTable
              - StreamArn

  getAllItems:
    handler: api/auth/handler.getAllItems
    events:
      - http:
          path: api/profile/getAll
          method: get
          integration: lambda
          cors: true
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  getProfile:
    handler: api/auth/handler.getProfile
    events:
      - http:
          path: api/profile/get
          method: get
          integration: lambda
          cors: true
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  updateProfile:
    handler: api/auth/handler.updateProfile
    events:
      - http:
          method: post
          path: api/profile/update
          cors: true
          integration: lambda
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  createProfile:
    handler: api/auth/handler.createProfile
    events:
      - http:
          method: post
          path: api/profile/create
          cors: true
          integration: lambda
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  getSelling:
      handler: api/admin.getSelling

      events:
        - http:
            path: api/admin/getSelling
            method: get
            integration: lambda
            cors: true
            response:
              headers:
                Access-Control-Allow-Origin: "'*'"

resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PDF_BUCKET}
    TemplatesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET}
    PromocodeDynamoDb:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "social"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "social"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.PROMOCODE_TABLE}

    ItemsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "social"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "social"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
plugins:
  - serverless-plugin-typescript